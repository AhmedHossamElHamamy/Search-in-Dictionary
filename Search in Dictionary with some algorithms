import java.util.LinkedList;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Queue;
import java.util.Scanner;

public class projectDS {

    public static void main(String[] args) throws FileNotFoundException {
        File file = new File("C:\\Users\\OWNER\\Downloads\\dictionary.txt"); // enter the path of your own file with .txt in the end.
        Scanner input = new Scanner(file);
        Scanner s = new Scanner(System.in);
        TreeNode root = new TreeNode(input.next());
        while (input.hasNext()) {
            insert(root, input.next());

        }

        int choice = 0;
         do {
            System.out.println("please, Choose a Number:");
            System.out.println("1- inorder traversal");
            System.out.println("2- post-order traversal");
            System.out.println("3- pre-order traversal");
            System.out.println("4- tree size");
            System.out.println("5- BFS traversal");
            System.out.println("6- tree height");
            System.out.println("7- search");
            System.out.println("8- insert new word");
            System.out.println("0-exit");

            choice = s.nextInt();
            
            switch (choice) {
                case 1:
                    inOrder(root);
                    System.out.println("-----------------------------------------");
                    break;
                case 2:
                    postOrder(root);
                    System.out.println("-----------------------------------------");
                    break;
                case 3:
                    preOrder(root);
                    System.out.println();
                    System.out.println("-----------------------------------------");
                    break;
                case 4:
                    System.out.println("the tree contains " + no_of_elements(root) + " words");
                    System.out.println("-----------------------------------------");
                    break;
                case 5:
                    breadthFirstSearch(root);
                    System.out.println("-----------------------------------------");
                    break;
                case 6:
                    System.out.println("the height is " + height(root));
                    System.out.println("-----------------------------------------");
                    break;
                case 7:
                    System.out.print("Enter a word to search: ");
                    String key = s.next();
                    Search search = new Search();
                    search.search(root, key);

                    if (!Search.founded) {
                        search.successorPredecessor(root, Search.result);
                        System.out.println("predecessor: " + search.predecessor);
                        System.out.println("successor: " + search.successor);
                    }
                    System.out.println("-----------------------------------------");
                    break;
                case 8:
                    System.out.print("Enter a word to insert: ");
                    String searchkey = s.next();
                    searchandinsert(root, searchkey);
                    System.out.println("-----------------------------------------");
                    break;
                case 0:
                    System.exit(0);
                    break;
                default:
                     System.out.println("wrong input,please enter a number from 0-8");
                System.out.println("-----------------------------------------");
            }
          
        } while (choice != 0);

    }

    public static TreeNode insert(TreeNode root, String data) {

        if (root == null) {
            return new TreeNode(data);
        }

        int r = data.compareTo(root.data);
        if (r < 0) {
            root.left = insert(root.left, data);
        } else {
            root.right = insert(root.right, data);
        }

        return root;

    }

    public static void preOrder(TreeNode root) {
        if (root == null) {
            return;
        }

        System.out.println((String) root.data);
        preOrder(root.left);
        preOrder(root.right);
    }

    public static void inOrder(TreeNode root) {
        if (root == null) {
            return;
        }

        inOrder(root.left);
        System.out.println((String) root.data);
        inOrder(root.right);
    }

    public static void postOrder(TreeNode root) {
        if (root == null) {
            return;
        }

        postOrder(root.left);
        postOrder(root.right);
        System.out.println((String) root.data);

    }

    public static void breadthFirstSearch(TreeNode root) {
        Queue<TreeNode> queue = new java.util.LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            TreeNode visitingNode = queue.poll();
            if (visitingNode == null) {
                continue;
            }
            System.out.println((String) visitingNode.data);
            queue.add(visitingNode.left);
            queue.add(visitingNode.right);
        }
    }

    public static void searchandinsert(TreeNode root, String data) {
        if (root.data.compareTo(data) == 0 || root == null) {
            System.out.println("the word is already in the dictionary");
        } else if (root.left == null && root.right == null) {
            insert(root, data);
            System.out.println("new word is added to the dictionary");
        } else if (data.compareTo(root.data) < 0 && root.left != null) {

            searchandinsert(root.left, data);

        } else if (data.compareTo(root.data) > 0 && root.right != null) {

            searchandinsert(root.right, data);
        } else {
            insert(root, data);
            System.out.println("new word is added to the dictionary");
        }

    }

    public static int no_of_elements(TreeNode root) {
        if (root == null) {
            return 0;
        }
        return no_of_elements(root.left) + 1 + no_of_elements(root.right);
    }

    public static int height(TreeNode root) {
        if (root == null) {
            return 0;
        } else {
            int leftD = height(root.left);
            int rightD = height(root.right);

            if (rightD < leftD) {
                return (leftD + 1);
            } else {
                return (rightD + 1);
            }
        }

    }
}

class Search {

    String successor, predecessor;
    static boolean founded = false;
    static String result = "";

    public static void search(TreeNode root, String data) {
        if (data.compareTo(root.data) == 0) {
            founded = true;
            System.out.println("founded");
        } else if (root.left == null && root.right == null) {
            System.out.println("Do you mean: " + root.data);
        } else if (data.compareTo(root.data) < 0 && root.left != null) {

            search(root.left, data);

        } else {  
            if (data.compareTo(root.data) > 0 && root.right != null) {
                search(root.right, data);
            } else {
                result = root.data;
                System.out.println("Do you mean: " + root.data);
            }

        }
    }

    public void successorPredecessor(TreeNode root, String val) {
        if (root != null) {
            if (root.data.compareTo(val) == 0) {
                if (root.left != null) {
                    TreeNode t = root.left;
                    while (t.right != null) {
                        t = t.right;
                    }
                    predecessor = t.data;
                }
                if (root.right != null) {
                    TreeNode t = root.right;
                    while (t.left != null) {
                        t = t.left;
                    }
                    successor = t.data;
                }
            } else if (root.data.compareTo(val) > 0) {
                successor = root.data;
                successorPredecessor(root.left, val);
            } else if (root.data.compareTo(val) < 0) {
                predecessor = root.data;
                successorPredecessor(root.right, val);
            }
        }

    }

}
